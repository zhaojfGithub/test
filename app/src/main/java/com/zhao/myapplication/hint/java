面对对象与面对过程
1.对于C语言来说，是完全面向过程的
2.对于C++来说，是半面对对象的
3.对于Java来说，是面对对象的
面向过程：简称PO,把事情分为几个步骤（相当于拆分成一个个的方法和数据），然后按照一定的顺序执行
面向对象：简称OO，面向对象会把事情抽象成对象的概念，先抽象对出对象，然后给对象赋一些属性和方法，让后让每个对象去执行自己的方法
面向对象优点：效率高，因为不需要实例化对象 缺点。耦合度高，扩展性差，不容易维护
面向对象的优化：耦合低，扩展性强，易维护，缺点 效率低  特性：封装，继承，多态

ConcurrentHashMap 线程安全  锁的是数组的节点

HashMap
HashMap本质上是一个散列表
三个问题：1.散列函数，2.哈希冲突，3.扩容方案
数据结构  多线程问题
HashMap属于Map集合体系的一部分，同时继承了Serializable可以被序列化，继承cloneable可以被复制
1.哈希函数的目标是计算key在数组中的下标，判断哈希函数的标准是：散列是否均匀，计算是否简单
  通过高16位与低16位进行异或运算来让高位参与散列，提高性能
  HashMap数组的长度位2的整数次幂来简化取模运算，提高性能
  HashMap通过控制初始化数组长度为2的正数次幂、扩容为原来2倍来控制数组长度一定为2的整数次幂
2.Hash冲突是指两个不同的key经过hash计算之后得到的数组下标是相同的
  HashMap采用的是链地址法，jdk1.8增加了红黑树优化
  出现冲突之后会在当前节点形成链表，当链表过长之后，会自动转化为红黑树，时间复杂度OlogN
    1.当链表的长度>=8且数组长度>=64,会转化为红黑树
    2.当链表长度>=8,但是数组长度<64,会优先进行扩容
    3.当红黑树节点<=6 会自动转化为链表

Kotlin 委托机制及其原理
类委托，属性委托，局部变量委托


Kotlin dataclass 与 class的区别
dataclass必须要有带参数的构造方法
dataclass不能被继承
都会生成get,set和构造方法
dataclass会额外生成copy方法，toString，equals，hashCode 方法

java的几种内部类
1.成员内部类  当某个类除了他的外部类。不会被其他类使用时应当使用成员内部类
2.静态内部类  在声明类的时候加上static关键字，他与外部类的属性，方法是并列关系
3.局部内部类  写在外部类的某个代码块或者方法块中，如果只在某个方法块中创建这个类的某些对象，则可以使用局部内部类
4.匿名内部类  在new的后面，额可以用来实现一个接口或者继承一个类

