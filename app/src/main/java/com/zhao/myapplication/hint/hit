OOM 即内存溢出，应用需要分配的内存超过了系统对应用内存的阈值
内存泄露 本质上是因为生命周期较长的对象去引用生命周期较短的对象，导致生命周期短的对象无法呗GC即使回收掉
1.handler 引起
2.bitmap没有调用recycle
3.资源型对象应当使用完及时关闭
4.注册没有取消
5.
内存抖动 主要是由于频繁的创建和销毁对象导致 -> 频繁调用gc
1.比如再onDraw 里面创建对象
2.大量的字符串拼接
8.0之前内存抖动会产生内存碎片，过多之后，新建大对象，会出现oom
程序卡顿
ANR 是指应用程序未响应
事件分发超时dispatchTimeout
避免再主线程中进行耗时操作
避免死锁，死循环的情况
基本分完一下几点
1.输入事件：5s内无响应，如屏幕触碰事件
2.广播：前台广播（BroadcastReceiver）的的onReceive方法时10s没有处理完成，后台广播的超时事件为60s
3.Service：前台的service20s没有执行完毕；后台的Service200s没有执行完毕
4.ContentProvider：10s内ContentProvider的publish未执行完毕

View的绘制流程
从activity的setContentView 开始
1.setContentView() -> getWindow() = PhoneWindow
2.DecorView ->Activity中根View extends FrameLayout
3.根据主题加载 加载不同的 layoutResource
4.加载自己写的xml
View的分发机制
#这个可以看 https://www.bilibili.com/video/BV1RZ4y1T7q1?p=10&vd_source=c667e6b45694b3b681071057e680db10
#直接教你手写Android事件分发，自己写一次印象深刻
dispatchTouchEvent -> 事件分发
dispatchTransformedTouchEvent -> 处理分发
onInterceptTouchEvent -> 事件拦截
onTouchEvent -> 事件处理

从Activity的开始
1.Activity 的 分发
2.没有拦截  交给 ViewGroup
3.没有拦截处理 交给下面ViewGroup 或者View
4.View 也没有处理 原路返回
一个U形状得传递图
DOWN MOVE UP 比较重要吧 ,还有点击区域也要考虑到  大于left 小于 right 大于top 小于 bottom 才会接受到事件 有资格进行处理  TouchTarget View[] 额类似 Handler Message的方式吧有点  链表回收池
TouchTarget 为当前View可以理解为缓存什么的

Handler
Message ->消息，数据单元
Message Queue ->消息队列 先进先出
Handler -> 将Message添加到消息队列，以及对消息队列的Message进行处理
Looper -> 循环器，循环取出消息队列的消息，并交给相应的Handler
Handler 消息机制用于同进程的线程间通信，其核心是线程间共享内存空间，而不同进程拥有不同的地址空间，也就不能用 handler 来实现进程间通信。
Handler 的处理过程运行在创建Handler的线程里
一个looper对应一个MessageQueue
一个线程对应一个Looper
一个Looper可以对应多个Handler


handler.sendMessage
handler.handleMessage

Thread 线程
1.继承Thread，重写run
2.实现Runnable 实现run
3.实现Callable 重写run

线程同步
1.ReentrantLock 重入锁 表示能够支持一个线程重复加锁  通常加到try之前 finally之后解锁
2.await 进入阻塞状态，知道另一个线程调用同一个条件的signalAll方法
3.synchronized
4.volatile 当一个变量被volatile修饰之后就具备两个含义1.当线程修改了变量的值，变量的新值对其他线程是立即可见的2.禁止使用里那个重排序：编译重排序，运行重排序

ListView和RecyclerView的区别
ListView：只能垂直滑动。有几个默认的Adapter。拥有子item的监听函数。不强制使用ViewHolder。两级缓存
RecyclerView：支持水平，垂直，瀑布流。Adapter需要自己实现。需要自己去实现接口。强制使用ViewHolder。四级缓存
ListView两级缓存
1.mActiveViews用户屏幕内ItemView的快速服用
2.mScrapViews用户缓存离开屏幕的ItemView
RecyclerView的四级缓存
1.mChangeScrap与mAttachedScrap用于屏幕内ItemView的快速移动
2.mChangeViews 默认上限为2，及缓存屏幕外的2个ItemView
3.mViewCacheExtension 用户自定义
4.RecyclerviewPool的上限为5
缓存对象的不同
Recyclerview缓存的是ViewHolder，ListView缓存的是View

ListView相对于RecyclerView的优化
1.实现了HeaderView和FooterView的方法
2.分割线可以直接设置
3.实现了点击方法
Recyclerview相对于LisView的优点
1.封装了ViewHolder，效率更高
2.可以添加增删Item动画，侧滑功能
3.支持局部刷新
4.更加解耦

滑动冲突



activity启动模式
standard
singleTop   生命周期 onCreate->onStart->onResume->onPause->onResume
singleTask
singleInstance
service启动模式
startService -> 不进行通讯 中止使用stopService
bindService  -> 可以进行通讯  中止使用unbindService
intent 一个封装了HandlerThread和Handler的异步框架，可用于后台耗时的任务，任务执行后会自动停止，优先级必单纯的线程高很多
广播 -> BroadcastReceiver
动态注册 ->
  优势：可以自由的控制注册和取消，有很大的灵活性
  劣势：只有在注册才能起作用，在activity的onDestroy后如果未被注销，会报异常
静态注册 ->
  不受程序是否启动的约束，是优势也是劣势
内容提供者 content provider
使一个应用程序的指定数据集提供给其他的程序，其他应用可以通过ContentResolver从该内容提供这种存取或存入数据

Glide 包括 封装，加息，下载，解码，比那换，缓存，显示等操作
封装参数->解析路径->读取图片缓存->有缓存->显示
                             ->无缓存->查找文件->本地文件|已下载->解码
                                             ->网络图片&未下载->下载文件->解码 ->变换->缓存->显示
缓存 ->四级缓存
1.活动缓存  HashMap 或引用 来缓存正在使用中的图片，保护图片不会被LruCache算法回收掉
2.内存缓存 LRU     ：防止应用重复将图片读入到内存，造成内存资源浪费
3.磁盘缓存 资源类型 ：防止应用重复的从网络或者其他地方下载和读取数据
4.磁盘缓存 原始数据
根据图片地址，宽高，变换，签名等生成key
如果不缓存变换后的类型相当于每次都要进行一次变换操作
如果不缓存原始数据则每次都要去重新下载数据

Glide 图片格式
ALPHA_8
RGB_565
ARGB_4444
ARGB_8888  每个像素占用4个字节
RGBA_F16
HARDWARE 一种特殊的配置，减少了内存占用同时也加快了Bitmap的绘制
Glide生命周期管理
在传入context中会生成一个隐式的Fragment，获取requestManger(监听生命周期)  requestMangerFragment
requestManger的生成 requestManager = factory.build(glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);

ViewModel
绑定的时候重要的是ViewModelStoreOwner，viewModelStore是一个HashMap 以String为key，以ViewModel为value
当activity销毁重建的时候ComponentActivity有一个静态类NonConfigurationInstances在onDestroy保存到里面去，然后在attach方法中恢复
接收到Lifecycle.Evnet.on_destory onDestroy的时候，会调用clear，然后清空



android 模块化 组件化 插件化
1.模块化：指解决一个负责问题时自顶向下逐层把系统划分成若干模块的快成
2.插件化：和模块化差不多，只是她是可以把模块打包成独立的Apk，可以动态的加载，删除，独立的插件Apk可以再线下下载安装，有利于价绍Apk的体积和实现模块的热修复
3.组件化：组件是指通用的功能或者UI库可以做成一个组件，比如分享，支付可以当成组件，下拉刷新可以做成组件，模块化是根据业务抽离，而组件化项目是根据功能Ui抽离的，一个可以有多个组件。组件则不能依赖其他组件

Java sdk ndk jni 关系
SDK开发，编写Java代码，调用各种Android的Api实现功能，编写含有native关键字代码开始
JNI开发，按照JNI编码规范，编写与java交互的本地代码，一般来说就是数据类型的转换，把C/C++的数据类转换成Java能识别出来的 其实就是先system.load进相应的jar
C/C++开发，编码实现业务逻辑，或调用NDK提供的本地API或库，完成android平台上特定功能的开发、封装
NDK编译，编写.MK文件，编译调用

so ,jar aar
CmakeLists 控制编译产生的文件
.cpp为编写的C++代码
以JAVA_开头，包名载中加上NativeLib+方法名+JNI






///////////////////////////////////////////////////////////////////////////
滚动
滚动类 Scroller,OverScroller
两者都是计算滑动的事件以及当前的位置，不同的是OverScroller多出一个超出阈值回弹，可以同设置为0取消回弹
View 滑动的基础是 mScrollX 和 mScrollY 两个属性。
调用一个 View 的滑动有 scrollBy() 和 scrollTo() 两种，前一种是增量式，后一种直接到位。
在View的draw方法中有computeScroll方法，可在进行复写，在其中获取Scroller中的mCurrentX，mCurrentY，即经过Scroller计算之后的坐标
科根据自己的规则调用scrollTo方法，就可以达到平稳滑动的效果,
Scroller 提供快速滚动的功能，在onTouEvent方法中获取相应的力度，然后调用Scroller的fling方法
力度可有VelocityTracker类计算得出
mScrollX、mScrollY在Canvas坐标中的意义，，区分手指滑动方向、内容滑动方向和mScrollX、mScrollY数值的关系
mScrollX此视图的内容水平滚动的偏移量（以像素为单位）
mScrollY此视图的内容垂直滚动的偏移量（以像素为单位）
手指向左滑动，内容将向右显示，这时 mScrollX > 0。
手指向右滑动，内容将向左显示，这时 mScrollX < 0.
手指向上滑动，内容将向下显示，这时 mScrollY < 0。
手指向下滑动，内容将向上显示，这时 mScrollY > 0.
ScrollLayoutView 用于测试demo


