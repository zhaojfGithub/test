plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    //编译时所使用的sdk
    compileSdk Integer.parseInt(prop10)

    flavorDimensions "asdasdfafasfsadgsdgkjashfgas"


    defaultConfig {
        //不一定是包名
        applicationId "com.zhao.myapplication"
        //这个可以往applicationId添加后缀applicationId+applicationIdSuffix 才是应用标识，才是包名
        //applicationIdSuffix "aaa"
        minSdk 21
        targetSdk Integer.parseInt(prop10)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //添加BuildConfig
        buildConfigField 'String', 'BASE_URL', '"http:www.baidu.com"'

        ndk {
            abiFilters 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }


    }


    //自定义产品风味
    //多渠道打包，通过applicationIdSuffix也加识说可以通过一个项目 打包出多个包名的app
    productFlavors {
        huawei {
            versionCode 2
            versionName "2.0"
            applicationIdSuffix ".huawei"
        }
        xiaomi {
            versionCode 3
            versionName "3.0"
            applicationIdSuffix ".xiaomi"
        }
        appo {
            versionCode 3
            versionName "3.0"
            applicationIdSuffix ".oppo"
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                productFlavors.each { data ->
                    def fileName = "${data.versionName}_${data.versionCode}.apk"
                    outputFileName = fileName
                }
            }
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //implementation project(path: ':mylibrary')
    implementation files('libs/sdk.jar')

    implementation files('libs/AMap2DMap_6.0.0_AMapSearch_9.2.0_AMapLocation_6.1.0_20220414.jar')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def camerax_version = "1.1.0-beta01"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"

    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    def lifecycle_version = '2.4.1'
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    def activity_version = '1.4.0'
    implementation "androidx.activity:activity-ktx:$activity_version"

    implementation "com.squareup.okhttp3:okhttp:4.10.0"
}

gradle.beforeProject {
    println "gradle.beforeProject"
}
gradle.afterProject {
    println "gradle.afterProject"
}
gradle.taskGraph.whenReady {
    println "gradle.taskGraph.whenReady"
}
beforeEvaluate {
    println "beforeEvaluate"
}
afterEvaluate {
    println "afterEvaluate"
}

gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    @Override
    void beforeEvaluate(Project project) {
        println "Configure listener beforeEvaluate"
    }

    @Override
    void afterEvaluate(Project project, ProjectState projectState) {
        println "Configure listener afterEvaluate"
    }
})

gradle.addBuildListener(new BuildListener() {
    @Override
    void settingsEvaluated(Settings settings) {
        println "Build listener settingsEvaluated"
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println "Build listener projectsLoaded"
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "Build listener projectsEvaluated"
    }

    @Override
    void buildFinished(BuildResult buildResult) {
        println "Build listener buildFinished"
    }
})

task runGradle {
    println "configure runGradle AAAAA"
    doFirst {
        println "doFirst runGradle AAAAA"
    }
}

task runProExtPro {
    println "runProExtPro\t" + prop3
    println "runProExtPro\t" + prop2
}


task(dynamicSo) {

}doLast {
        println("dynamicSo insert!!!! ")
        //projectDir 在哪个project下面，projectDir就是哪个路径
        //print(getRootProject().findAll(null))

        /*def file = new File("${projectDir}/build/intermediates/merged_native_libs/debug/out/lib")
    //默认删除所有的so库
    if (file.exists()) {
        file.listFiles().each {
            if (it.isDirectory()) {
                it.listFiles().each {
                    target ->
                        print("file ${target.name}")
                        def compareName = target.name
                        deleteSoName.each {
                            if (compareName.contains(it)) {
                                target.delete()
                            }
                        }
                }
            }
        }
    } else {
        print("nil")
    }*/
    }



afterEvaluate {
    println("dynamicSo task start")
    /*from components.forEach({
        println(it.name)
    })*/

    /*def customer = tasks.findByName("dynamicSo")

    if (customer != null) {
        println("customer no null")
    } else {
        println("customer null")
    }
//    def merge = 'merge[\\w]*DebugNativeLibs'
//    def strip = 'strip[\\w]*DebugDebugSymbols'
    def merge = 'mergeHuaweiDebugNativeLibs'
    def strip = 'stripHuaweiDebugDebugSymbols'
    Task mergeClass
    Task stripClass
    tasks.forEach {
        println(it)
        if (it.name.matches(merge)) {
            mergeClass = it
        }
        if (it.name.matches(strip)) {
            stripClass = it
        }

    }
    if (mergeClass != null || stripClass != null) {
        customer.mustRunAfter(mergeClass)
        stripClass.dependsOn(customer)
        println("yes")
    } else {
        println("no")
    }*/
}