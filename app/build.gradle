plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    //编译时所使用的sdk
    compileSdk Integer.parseInt(prop10)

    flavorDimensions "asdasdfafasfsadgsdgkjashfgas"



    defaultConfig {
        //不一定是包名
        applicationId "com.zhao.myapplication"
        //这个可以往applicationId添加后缀applicationId+applicationIdSuffix 才是应用标识，才是包名
        //applicationIdSuffix "aaa"
        minSdk 21
        targetSdk Integer.parseInt(prop10)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //添加BuildConfig
        buildConfigField 'String','BASE_URL','"http:www.baidu.com"'
    }


    //自定义产品风味
    //多渠道打包，通过applicationIdSuffix也加识说可以通过一个项目 打包出多个包名的app
    productFlavors {
        huawei {
            versionCode 2
            versionName "2.0"
            applicationIdSuffix ".huawei"
        }
        xiaomi {
            versionCode 3
            versionName "3.0"
            applicationIdSuffix ".xiaomi"
        }
        appo {
            versionCode 3
            versionName "3.0"
            applicationIdSuffix ".oppo"
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures{
        viewBinding true
    }

    applicationVariants.all{ variant->
        variant.outputs.all{ output->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')){
                productFlavors.each{ data->
                    def fileName = "${data.versionName}_${data.versionCode}.apk"
                    outputFileName = fileName
                }
            }
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def camerax_version = "1.1.0-beta01"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"

    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"
}

gradle.beforeProject {
    println "gradle.beforeProject"
}
gradle.afterProject {
    println "gradle.afterProject"
}
gradle.taskGraph.whenReady {
    println "gradle.taskGraph.whenReady"
}
beforeEvaluate {
    println "beforeEvaluate"
}
afterEvaluate {
    println "afterEvaluate"
}

gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    @Override
    void beforeEvaluate(Project project) {
        println "Configure listener beforeEvaluate"
    }

    @Override
    void afterEvaluate(Project project, ProjectState projectState) {
        println "Configure listener afterEvaluate"
    }
})

gradle.addBuildListener(new BuildListener() {
    @Override
    void settingsEvaluated(Settings settings) {
        println "Build listener settingsEvaluated"
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println "Build listener projectsLoaded"
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "Build listener projectsEvaluated"
    }

    @Override
    void buildFinished(BuildResult buildResult) {
        println "Build listener buildFinished"
    }
})

task runGradle{
    println "configure runGradle AAAAA"
    doFirst {
        println "doFirst runGradle AAAAA"
    }
}

task runProExtPro{
    println "runProExtPro\t" + prop3
    println "runProExtPro\t" + prop2
}